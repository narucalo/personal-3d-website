{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nam\\\\Desktop\\\\personal-3d-website\\\\src\\\\components\\\\ThreeDScene.js\";\n// src/components/ThreeDScene.js\n\nimport React, { useRef } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { Points, PointMaterial } from '@react-three/drei';\nimport * as THREE from 'three';\nconst Galaxy = () => {\n  const pointsRef = useRef();\n\n  // Generate a set of random points to simulate stars\n  const generateGalaxy = () => {\n    const stars = new Float32Array(10000 * 3); // 10,000 points, each with x, y, z coordinates\n    for (let i = 0; i < stars.length; i++) {\n      stars[i] = (Math.random() - 0.5) * 10; // Random position in 3D space\n    }\n    return stars;\n  };\n\n  // Rotate the galaxy on each frame\n  useFrame(() => {\n    if (pointsRef.current) {\n      pointsRef.current.rotation.y += 0.001;\n    }\n  });\n  return /*#__PURE__*/React.createElement(Points, {\n    ref: pointsRef,\n    positions: generateGalaxy(),\n    stride: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PointMaterial, {\n    transparent: true,\n    color: \"white\",\n    size: 0.05,\n    sizeAttenuation: true,\n    depthWrite: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }));\n};\nconst ThreeDScene = () => {\n  return /*#__PURE__*/React.createElement(Canvas, {\n    style: {\n      background: 'black',\n      height: '100vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Galaxy, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"ambientLight\", {\n    intensity: 0.5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }));\n};\nexport default ThreeDScene;","map":{"version":3,"names":["React","useRef","Canvas","useFrame","Points","PointMaterial","THREE","Galaxy","pointsRef","generateGalaxy","stars","Float32Array","i","length","Math","random","current","rotation","y","createElement","ref","positions","stride","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","transparent","color","size","sizeAttenuation","depthWrite","ThreeDScene","style","background","height","intensity"],"sources":["C:/Users/Nam/Desktop/personal-3d-website/src/components/ThreeDScene.js"],"sourcesContent":["// src/components/ThreeDScene.js\r\n\r\nimport React, { useRef } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { Points, PointMaterial } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\nconst Galaxy = () => {\r\n  const pointsRef = useRef();\r\n\r\n  // Generate a set of random points to simulate stars\r\n  const generateGalaxy = () => {\r\n    const stars = new Float32Array(10000 * 3); // 10,000 points, each with x, y, z coordinates\r\n    for (let i = 0; i < stars.length; i++) {\r\n      stars[i] = (Math.random() - 0.5) * 10; // Random position in 3D space\r\n    }\r\n    return stars;\r\n  };\r\n\r\n  // Rotate the galaxy on each frame\r\n  useFrame(() => {\r\n    if (pointsRef.current) {\r\n      pointsRef.current.rotation.y += 0.001;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Points ref={pointsRef} positions={generateGalaxy()} stride={3}>\r\n      <PointMaterial\r\n        transparent\r\n        color=\"white\"\r\n        size={0.05}\r\n        sizeAttenuation={true}\r\n        depthWrite={false}\r\n      />\r\n    </Points>\r\n  );\r\n};\r\n\r\nconst ThreeDScene = () => {\r\n  return (\r\n    <Canvas style={{ background: 'black', height: '100vh' }}>\r\n      <Galaxy />\r\n      <ambientLight intensity={0.5} />\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport default ThreeDScene;\r\n"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,SAASC,MAAM,EAAEC,QAAQ,QAAQ,oBAAoB;AACrD,SAASC,MAAM,EAAEC,aAAa,QAAQ,mBAAmB;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACnB,MAAMC,SAAS,GAAGP,MAAM,CAAC,CAAC;;EAE1B;EACA,MAAMQ,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,KAAK,GAAG,IAAIC,YAAY,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACrCF,KAAK,CAACE,CAAC,CAAC,GAAG,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC;IACzC;IACA,OAAOL,KAAK;EACd,CAAC;;EAED;EACAP,QAAQ,CAAC,MAAM;IACb,IAAIK,SAAS,CAACQ,OAAO,EAAE;MACrBR,SAAS,CAACQ,OAAO,CAACC,QAAQ,CAACC,CAAC,IAAI,KAAK;IACvC;EACF,CAAC,CAAC;EAEF,oBACElB,KAAA,CAAAmB,aAAA,CAACf,MAAM;IAACgB,GAAG,EAAEZ,SAAU;IAACa,SAAS,EAAEZ,cAAc,CAAC,CAAE;IAACa,MAAM,EAAE,CAAE;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC7D5B,KAAA,CAAAmB,aAAA,CAACd,aAAa;IACZwB,WAAW;IACXC,KAAK,EAAC,OAAO;IACbC,IAAI,EAAE,IAAK;IACXC,eAAe,EAAE,IAAK;IACtBC,UAAU,EAAE,KAAM;IAAAV,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACnB,CACK,CAAC;AAEb,CAAC;AAED,MAAMM,WAAW,GAAGA,CAAA,KAAM;EACxB,oBACElC,KAAA,CAAAmB,aAAA,CAACjB,MAAM;IAACiC,KAAK,EAAE;MAAEC,UAAU,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAAAd,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACtD5B,KAAA,CAAAmB,aAAA,CAACZ,MAAM;IAAAgB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eACV5B,KAAA,CAAAmB,aAAA;IAAcmB,SAAS,EAAE,GAAI;IAAAf,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACzB,CAAC;AAEb,CAAC;AAED,eAAeM,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}